#include <WiFi.h>
#include "EmbeddedMqttBroker.h"
#include <PubSubClient.h>

// Define MQTT Broker Namespace
using namespace mqttBrokerName;

const char* mqtt_topic = "ROOM";

// WiFi credentials
const char *ssid = "------------";
const char *password = "-------------";

/******************* MQTT broker ********************/
uint16_t mqttPort = 1883;
MqttBroker broker(mqttPort);

// MQTT client object
WiFiClient espClient;
PubSubClient client(espClient);

// Define Control Pin
#define PIN_TO_CONTROL1 5 // Set to appropriate GPIO

// called when a message is received
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message on topic: ");
  Serial.println(topic);
  Serial.print("Content: ");
  String message = "";
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    message += (char)payload[i];
  }
  Serial.println();

  if (message == "ALARMR1" || message == "ALARMR2") {
    digitalWrite(PIN_TO_CONTROL1, HIGH);
    Serial.println("Pin set to HIGH");
  } else {
    digitalWrite(PIN_TO_CONTROL1, LOW);
    Serial.println("Pin set to LOW");
  }
}

// Function to connect the MQTT client to the broker
void reconnectClient() {
  while (!client.connected()) {
    Serial.print("Connecting as MQTT client to ");
    Serial.print(WiFi.localIP());
    Serial.print(":");
    Serial.println(mqttPort);

    if (client.connect("Broker_Client")) {
      Serial.println("Connected as MQTT client!");
      client.subscribe(mqtt_topic);
    } else {
      Serial.print("Connection failed. State=");
      Serial.println(client.state());
      delay(2000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(PIN_TO_CONTROL1, OUTPUT);

  Serial.println("\n\nSimple MQTT Broker with client");
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi");
    return;
  }

  Serial.println("\nWiFi connected");
  broker.setMaxNumClients(9);
  broker.startBroker();
  Serial.println("MQTT Broker started");

  Serial.print("Use this IP: ");
  Serial.println(WiFi.localIP());
  Serial.print("and this port: ");
  Serial.println(mqttPort);

  client.setServer(WiFi.localIP().toString().c_str(), mqttPort);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnectClient();
  }
  client.loop();
}
